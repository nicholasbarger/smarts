<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ERR00000" xml:space="preserve">
    <value />
    <comment>This is a placholder, it dynamically generates errors based on any generic errors.</comment>
  </data>
  <data name="ERR00001" xml:space="preserve">
    <value />
    <comment>This is a placeholder, it dynamically generates errors based on db errors.</comment>
  </data>
  <data name="ERR00002" xml:space="preserve">
    <value>The item specified was not found.</value>
    <comment>For when an object that is expected to be found does not exist.</comment>
  </data>
  <data name="ERR00003" xml:space="preserve">
    <value>The required Id was not specified.</value>
    <comment>For when a required id in a parameter or object is not specified.</comment>
  </data>
  <data name="ERR00004" xml:space="preserve">
    <value>The item is null.</value>
    <comment>For when an object is null.</comment>
  </data>
  <data name="ERR00005" xml:space="preserve">
    <value>You are not authorized to access the resource or action specified.</value>
    <comment>General authentication error.</comment>
  </data>
  <data name="ERR00105" xml:space="preserve">
    <value>The asset type must be specified.</value>
    <comment>Asset validation.</comment>
  </data>
  <data name="ERR00106" xml:space="preserve">
    <value>The contributor must be specified.</value>
    <comment>Asset validation.</comment>
  </data>
  <data name="ERR00107" xml:space="preserve">
    <value>Difficulty rating must be between 1 and 5 if specified.</value>
    <comment>Asset validation.</comment>
  </data>
  <data name="ERR00108" xml:space="preserve">
    <value>Importance rating must be between 1 and 5 if specified.</value>
    <comment>Asset validation.</comment>
  </data>
  <data name="ERR00109" xml:space="preserve">
    <value>Passing score must be between 1 and 100 if specified.</value>
    <comment>Asset validation.</comment>
  </data>
  <data name="ERR00110" xml:space="preserve">
    <value>Asset title must be specified and can not exceed 100 characters.</value>
    <comment>Asset validation.</comment>
  </data>
  <data name="ERR00111" xml:space="preserve">
    <value>Asset uri is required.</value>
    <comment>Asset validation.</comment>
  </data>
  <data name="ERR00112" xml:space="preserve">
    <value>The specified uri is too long, please use a url shortening tool such as http://www.bit.ly</value>
    <comment>Asset validation.</comment>
  </data>
  <data name="ERR00200" xml:space="preserve">
    <value>A value must be specified for a subject, it's used like a hashtag.</value>
    <comment>Subject validation.</comment>
  </data>
  <data name="ERR00201" xml:space="preserve">
    <value>The description must be less than 4000 characters long.</value>
    <comment>Subject validation.</comment>
  </data>
  <data name="ERR00202" xml:space="preserve">
    <value>The title must be less than 100 characters long.</value>
    <comment>Subject validation.</comment>
  </data>
  <data name="ERR00301" xml:space="preserve">
    <value>The description must be less than 4000 characters long.</value>
    <comment>Curriculum validation.</comment>
  </data>
  <data name="ERR00302" xml:space="preserve">
    <value>The title must be less than 100 characters long.</value>
    <comment>Curriculum validation.</comment>
  </data>
</root>